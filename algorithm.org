#+title: Notes
This post is my notes for preparing a coding interview, 
including some thoughts about classic problems, 
and some terminologies that might be necessary for an interview.
* STL
** priority_queue
- priority_queue<T, Container_t, CMP_t>

  #+BEGIN_SRC C++
    auto cmp = [](int a, int b) {return a < b;};
    priority_queue<int, vector<int>, decltype(cmp)> queue(cmp);
    queue.push(xxx)
    queue.pop()
    queue.top()
  #+END_SRC
** bitset
bitset<N>
- test
- set
- reset
- to_string
- to_ulong
** deque
- pop_front()
- pop_back
- push_front
- push_back
- erase
** heap
- make_heap
- push_heap
- pop_heap
** nth_element
- operator<
- the left part between mid_it are less than *mid_it
- nth_element(begin_it, mid_it, end_it, cmp)
- O(n) time, O(NlogN) swap
** TODO stringstream
** lower_bound, upper_bound, equal_range
the list should be in ascending order

support customized compare which is similar to operator<
#+BEGIN_SRC C++ :flags -std=c++11 :main no
  #include <algorithm>
  #include <iostream>
  #include <vector>
  using namespace std;

  int main() {
    vector<int> arr({0, 1, 2, 3, 4, 5, 5, 6, 7, 10});
    // start, end, value
    auto lower = lower_bound(arr.begin(), arr.end(), 4);
    auto higher = upper_bound(arr.begin(), arr.end(), 4);
    auto equal = equal_range(arr.begin(), arr.end(), 5);

    cout << "lower\t" << *lower << endl;
    cout << "higher\t" << *higher << endl;
    cout << "equal size\t" << equal.second - equal.first << endl;

    return 0;
  }
#+END_SRC

#+RESULTS:
| lower      | 4 |
| higher     | 5 |
| equal size | 2 |
** hash
return size_t
#+BEGIN_SRC C++ :main no :flags -std=c++11
  #include <iostream>
  #include <functional>
  using namespace std;

  int main() {
    auto key = std::hash<std::string>()("hello world");
    cout << "hash: " << key << endl;
    return 0;
  }
#+END_SRC

#+RESULTS:
: hash: 12386028635079221413

* Good questions
- https://leetcode.com/problems/android-unlock-patterns/description/
  - DFS
- https://leetcode.com/problems/sequence-reconstruction/description/
  - Topological sorting
- https://leetcode.com/problems/longest-consecutive-sequence/description/
  - greedy or union find
- [meeting room](https://leetcode.com/problems/meeting-rooms/discuss/)
  - greedy, but a good introduction to  meeting room problems
- [Best Meeting Point](https://leetcode.com/problems/best-meeting-point/description/)
  - median
* skills
** container needs initialization
** analysis the basic solution first, if necessary to improve, try better one
https://leetcode.com/problems/maximum-average-subarray-i/description/
** use special marks to avoid duplicate searching
for example, breadth-first search in a matrix, to avoid repeatly searhcing the same element,

1. replace the element with a special token such as `#`
2. recursive search the next step
3. restore the element
** unique combination use a `used` status to avoid duplication
There are some duplicate keys, sort and make them adjacement, and make sure the
same characters ares used in order(similar to concurrency safty conditions to avoid deadlock).
** reduce nested barskets
Just indicate whehter the chars should be bold, and the rest is straightforward.
https://leetcode.com/problems/add-bold-tag-in-string/description/
** n^2 time -> O(n), 32bits
https://leetcode.com/problems/total-hamming-distance/description/
** delete an element from array in O(1)
- replace this element with the last element
- delete the last element
* tree traversal
- [Binary Tree Preorder Traversal](https://leetcode.com/problems/binary-tree-preorder-traversal/description/)
- [Binary Tree Inorder Traversal](https://leetcode.com/problems/binary-tree-inorder-traversal/description/)
- [Binary Tree Postorder Traversal](https://leetcode.com/problems/binary-tree-postorder-traversal/description/)
- [good solution without recursion](https://leetcode.com/problems/binary-tree-postorder-traversal/discuss/)
** initializing variables
It is a bad idea to initialize variables to MAX or MIN of a type, for MIN and MAX are within the boundary.

Better to init them with some logic impossible cases, such as a data structure that has a `begin` and `end`,
set `end<begin`, it is simple to check whether this is the initialization.
** priority queue
<queue>
- push
- pop
- top
- customize compare
  #+BEGIN_SRC C++
    auto cmp = [](int a, int b) {
      return a < b;
    };
    // max queue
    std::priority_queue<int, vector<int>, decltype(cmp)> queue(cmp);

    // visit top
    queue.top()
  #+END_SRC
** avoid overflow
*** safe way to get median
~(end - begin)/2 + begin~
* types
* sort
** heap
**Heap is a good choice if just want the top K elements and do not want to sort**
*** some STL support
- ~make_heap~ to build a **max* heap using ~operator<~
- ~push_heap~ to add a new element
- ~pop_heap~ to remove the first element, will sort the next element automatically

  #+BEGIN_SRC C++
    // default max heap
    vector<int> heap;
    make_heap(heap.begin(), heap.end());
    int v0 = heap.back();
    // move value to the back
    pop_heap(heap.begin(), heap.end());
    heap.pop_back();

    // put new value to the back
    // push heap will rebuild the heap with the new value
    heap.push_back(7);
    push_heap(heap.begin(), heap.end());
  #+END_SRC

#+BEGIN_SRC C++ :flags -std=c++11 :includes <algorithm> <iostream> <vector> :namespaces std
  using namespace std;

  vector<int> arr({4, 3, 5, 8, 1, 3, 2});
  make_heap(arr.begin(), arr.end());

  cout << "after build" << endl;
  for (auto i : arr) {
    cout << i << " ";
  }
  cout << endl;

  int nnums = arr.size();
  for (int i = 0; i < nnums; i++) {
    pop_heap(arr.begin(), arr.end());
    cout << "the 1-th is " << arr.back() << endl;
    arr.pop_back();
  }
#+END_SRC

#+RESULTS:
| after | build |    |   |   |   |   |
| 8     | 4     | 5  | 3 | 1 | 3 | 2 |
| the   | 1-th  | is | 8 |   |   |   |
| the   | 1-th  | is | 5 |   |   |   |
| the   | 1-th  | is | 4 |   |   |   |
| the   | 1-th  | is | 3 |   |   |   |
| the   | 1-th  | is | 3 |   |   |   |
| the   | 1-th  | is | 2 |   |   |   |
| the   | 1-th  | is | 1 |   |   |   |
* search
** search in ordered
- [search a 2D matrixII](https://leetcode.com/problems/search-a-2d-matrix-ii/description/)
* heap and priority_queue
https://leetcode.com/problems/find-median-from-data-stream/description/
* Array and sequence
- https://leetcode.com/problems/reverse-words-in-a-string-ii/description/
  - should make sure that the start is the begin of a word
** parse complex format
~stream~ can help to parse some formats, for example, read a fraction

#+BEGIN_SRC C++
  stringstream is;
  is << str;

  int numerator;
  int dominator;
  char _;

  is >> numerator >> _ >> dominator;
#+END_SRC
** TODO scanf and cin to split string.
https://leetcode.com/problems/fraction-addition-and-subtraction/description/
#+BEGIN_SRC C++
  char _;
  int numerator;
  int denominator;
  // to read a fraction like -2/3
  ss >> numerator >> _ >> denominator;
#+END_SRC

read a comma seperated string

#+BEGIN_SRC C++
  string str = "1,2,3,4";
  stringstream ss(str);

  int i;
  vector<int> nums;

  while (ss >> i) {
    nums.push_back(i);
    if (ss.peek() == ',') {
      ss.ignore();
    }
  }
#+END_SRC
** production or sum of subarray
- [max product subarray](https://leetcode.com/problems/maximum-product-subarray/description/)
** TODO binary search and get min/max than this num
** ~nth_element~ in O(n)
- time complexity: O(n)
- O(NlogN) swaps
- compare by operator<
- the n-1 elements are less than nth element

** find peak
the core idea is to find the local maximum.

be careful that in binary search, the mid should be less than end, but may be equal begin,
so compare ~nums[mid]~ and ~nums[mid+1]~ should be more safe.
https://leetcode.com/problems/find-peak-element/description/
** subsequence related
- [maximum size of subarray sum equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/description/)
* binary operations
The basic binary operations are as follows

| ~<<~  | left shift                 | ~1<<2~ gets 2         |
| ~>>~  | right shift                | ~4>>2~ gets 1         |
| ~&~   | bitwise and                | ~0 & 1 = 0~           |
| \vert | bitwise or                 |                       |
| ~~~   | bitwise complement         | ~unsigned int max=~0~ |
| ~^~   | bitwise Exclusive-Or (XOR) | ~10^11=01~            |
** set some bit
#+BEGIN_SRC C++
  x |= 1 << n;
#+END_SRC
** reset some bit
#+BEGIN_SRC C++
  x &= (~0 ^ (1<<n))
#+END_SRC
** check some bit
#+BEGIN_SRC C++
  x & (1<<n)
#+END_SRC

** bitset
Bitset is a c++ container for bits.
*** operators
| ~test~      | access the specific bit                             |
| ~all~       | check if all bits are set to ~true~                 |
| ~any~       |                                                     |
| ~none~      |                                                     |
| ~count~     | returns the number of bits set to ~true~            |
| ~size~      | return the size number of bits that bitset can hold |
| ~set~       | sets bits to ~true~ or gien value                   |
| ~reset~     | sets bits to ~false~                                |
| ~flip~      | toggles the values of bits                          |
| ~to_string~ | returns a string representation of the data         |
| ~to_ulong~  |                                                     |
| ~to_ullong~ |                                                     |
| ~&~         |                                                     |
| \vert       |                                                     |
| ~^~         |                                                     |
| ~<<~        |                                                     |
| ~>>~        |                                                     |

#+BEGIN_SRC C++ :includes <iostream> <bitset> :flags -std=c++11 :namespaces std
  using namespace std;

  bitset<16> bits;
  bits.set(1);
  bits.set(3);
  bits.set(5);

  cout << bits.to_string() << endl;
  cout << "~ " << bits.flip().to_string() << endl;
#+END_SRC

#+RESULTS:
| 101010 |                  |
|      ~ | 1111111111010101 |
** storeage of negative numbers
A positive number is representated as itself while a negative number 
is representated as the two's complement of its absolute value.

In other words, the binary representation of -K as a N-bit number is concat(1, 2^(N-1)-K). 
The absolute value should be ~~abs + 1~ , for example, the ~-3~ with 4 bits will be expressed as ~1101~.

To plus one positive number plus one negative number simply plus each bit of the numbers.
** classicial problems
*** XOR
- Single Number
  - Given an array of integers, every element appears twice except one.
- Single Number II
  - Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.
- Single Number III
  - Given an array of numbers ~nums~, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.
  
**Some general ideas**

- the XOR(exclusive-or) operation on two same numbers will be zero.
- counters on integers' bits have ~O(1)~ storage complexity, while the ones on integers will get `O(n)~.
  
*** bits as tiny set (which has less than 32 or 64 entries)
If a key that has less than 64 keys is needed, an `long long` or `int` can be used.
By using an ~unsigned int~ or ~unsigned long long~, one can get a set with constant memroy.

The bitset can be used too, and the number ob bits can be more than 32, but its size is fixed.
*** bit as group
https://leetcode.com/problems/total-hamming-distance/discuss/
* Linked List
* trees
** top to bottom or bottom to top
If we want to traverse a tree, from top to bottom is ok; if to generate multiple trees, 
from bottom to top should be easier, use a vector to store subtrees.

[Unique Binary Search TreeII](https://leetcode.com/problems/unique-binary-search-trees-ii/description/)

** TODO
- https://leetcode.com/problemset/algorithms/?difficulty=Medium
* BFS and DFS
- use BFS to find the shortest path to an destination
- use DFS to solve a maze.
- find the path to a destination
- [word ladder](https://leetcode.com/problems/word-ladder/description/)
  - BFS should remove the record before push to the queue.
- [word search](https://leetcode.com/problems/word-search/discuss/)
- [word searchII](https://leetcode.com/problems/word-search-ii/description/)
  - DFS easy to avoid duplicate searching
  - basic TireTree to pass node* and effective searching.
** DFS
- traverse all the next positions, prune if needed
- do not constrained to a table, if no path is needed
https://leetcode.com/problems/android-unlock-patterns/description/
* Topological sorting
https://en.wikipedia.org/wiki/Topological_sorting

#+BEGIN_SRC sh
  L ← Empty list that will contain the sorted elements
  S ← Set of all nodes with no incoming edge
  while S is non-empty do
        remove a node n from S
        add n to tail of L
        for each node m with an edge e from n to m do
            remove edge e from the graph
            if m has no other incoming edges then
               insert m into S
  if graph has edges then
      return error (graph has at least one cycle)
  else
      return L (a topologically sorted order)
#+END_SRC

https://leetcode.com/problems/sequence-reconstruction/description/

* Dynamic Programming
** find the maximum or longest
if the recursive branchs' result conflits with each other, 
the recursive function should return a complete result and the caller frame should compare them.

https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/
** classical problems
*** loggest increasing subsequences
#+BEGIN_SRC C++ :flags -std=c++11 :main no
  #include <iostream>
  #include <vector>
  using namespace std;

  int longestSubseq(const vector<int>& A) {
    // store the maximum
    int res = A.empty() ? 0 : 1;
    vector<int> length(A.size(), 1);
    for (int i = 1; i < A.size(); i++) {
      for (int j = 0; j < i; j++) {
        if (A[j] < A[i]) {
          length[i] = max(length[i], length[j]+1);
          res = max(length[i], res);
        }
      }
    }
    return res;
  }

  int main() {
    vector<int> A({2,0,1,3,5,2});
    cout << longestSubseq(A) << endl;
    return 0;
  }
#+END_SRC

#+RESULTS:
: 4

*** shortest paths in DAG
min(
#+BEGIN_SRC C++ :flags -std=c++11 :main no
  #include <iostream>
  #include <vector>
  #include <set>
  #include <deque>
  using namespace std;


  int ShortestPath(int testcase) {
      // construct graph
      vector<set<int>> edges(testcase+1);
      vector<int> incomes(testcase+1, 0);
      for (int i = 1; i <= testcase; i++) {
          for (int j = i+1; j <= testcase; j++) {
              if (j == i+1 || j == 3 * i) {
                  edges[i].insert(j);
                  incomes[j] ++;
              }
          }
      }

      // topological order traverse
      deque<int> tovisit({1});
      vector<int> dist(testcase+1, numeric_limits<int>::max());
      dist[1] = 0;
      while (!tovisit.empty()) {
          for (auto s : tovisit) {
              for (auto t : edges[s]) {
                  dist[t] = min(dist[t], dist[s]+1);
                  if (--incomes[t] == 0) {
                      tovisit.push_back(t);
                  }
              }
              tovisit.pop_front();
          }
      }
      return dist[testcase];
  }

  int main() {
    //code
    cout << ShortestPath(11) << endl;

    return 0;
  }
#+END_SRC

#+RESULTS:
: 4

*** Knapsack
**** Knapsack with repeating
#+BEGIN_SRC C++ :flags -std=c++11 :main no :includes <iostream> <vector>
  using namespace std;

  int maxValue(int W, vector<int>& values, vector<int>& weights) {
    int result = 0;
    // with weight
    vector<int> dp(values.size()+1, 0);

    for (int weight = 0; weight <= W; weight++) {
      // traverse all the goods
      for (int i = 0; i < values.size(); i++) {
        if (weight - weights[i] >= 0) {
          int w = weights[i];
          int v = values[i];
          dp[weight] = max(dp[weight-w]+v, dp[weight]);
          result = max(result, dp[weight]);
          cout << "dp " << weight << " : " << dp[weight] << endl;
        }
      }
    }
    return result;
  }

  int main() {
    vector<int> weights ({3,2,5,1,2,7});
    vector<int> values({2,1,4,6,3,2});
    cout << maxValue(10, weights, values) << endl;

    return 0;
  }
#+END_SRC

#+RESULTS:
**** Knapsack without repeating
*** edit distance
#+BEGIN_SRC C++ :main no :flags -std=c++11
  #include <iostream>
  #include <vector>
  #include <map>
  using namespace std;

  class Solution {
  public:
      int minDistance(string word1, string word2) {
        cout << "in function" << endl;
        vector<vector<int>> dp(word1.size()+1);
        for (int i = 0; i < word2.size(); i++) {
          dp.push_back(vector<int>(word2.size(), 0));
        }

        for (int i = 1; i <= word1.size(); i++) {
          dp[i][0] = i;
        }
        for (int i = 1; i <= word2.size(); i++) {
          dp[0][i] = i;
        }

        for (int i = 1; i <= word1.size(); i++) {
          for (int j = 1; j <= word2.size(); j++) {
            if (word1[i] == word2[j]) {
              dp[i][j] = dp[i-1][j-1];
            } else {
              dp[i][j] = min(dp[i-1][j-1]+1, dp[i][j-1]+1);
              dp[i][j] = min(dp[i][j], dp[i-1][j]+1);
            }
          }
        }
        return dp[word1.size()][word2.size()];
      }
  };

  int main() {
    Solution sol;
    cout << sol.minDistance("h", "hyy") << endl;
    return 0;
  }
#+END_SRC

#+RESULTS:

*** bag
- [Partition equal subset sum](https://leetcode.com/problems/partition-equal-subset-sum/description/)
  - save time and space
*** boundary related sum or product
- product of array except self
*** states based on previous
*** maximum
- https://leetcode.com/problems/maximum-length-of-pair-chain/description/
*** partition
https://leetcode.com/problems/target-sum/description/
*** coin change
https://leetcode.com/problems/coin-change/description/
dp[i][sum] = min(dp[i][sum-coins[i]]+1, dp[i-1][sum])
* math
** check element adjacement in a matrix
#+BEGIN_SRC C++
  using pos_t = pair<int, int>;

  (abs(pos1.first - pos2.first) == 1 && pos1.second == pos2.second) ||
  (abs(pos1.second - pos2.second) == 1 && pos1.second == pos2.second)
#+END_SRC

- [word search](https://leetcode.com/problems/word-search/description/)
** matrix
- [spiral matrix](https://leetcode.com/problems/spiral-matrix/description/)
** number represented by an array
- [next permutation](https://leetcode.com/problems/next-permutation/description/)
** Reservoir Sampling
*** TODO choose k samples
- the number of items is unknown.

- 1/k probability to select current item
- 1-1/k probability to drop current item
*** choose 1 sample
- count the items.
- sample the current item with probability 1/count
- ~rand() % count == count-1~
- https://leetcode.com/problems/linked-list-random-node/description/
*** distributed reservoir sampling
- split the original input to multiple parts
- remember each part size
- do reservoir sampling parally in multiple machines
- **merge the final samples with sampling weight of 1/size**
** greatest common divisor (GCD)
GCD can be used to represent the fraction that is hard to be transformed to be a decimal.
#+BEGIN_SRC python
  def gcd(a, b):
      while b != 0:
          t = b
          b = a % b
          a = t
      return a
#+END_SRC
** cycle detection
Floyd's algorIthm
Floyd's cycle-finding algorithm is a pointer algorithm that uses only two pointers, which move through the sequence at different speeds.
#+BEGIN_SRC C++
  ListNode* findCircle(ListNode* head) {
    ListNode* slow = head, *fast = head;

    while (slow && fast) {
      if (fast != head && fast == slow) {
        fast = head;
        while(fast != slow) {
          fast = fast->next;
          slow = slow->next;
        }
        return fast;
      }
      // slow, one step
      slow = slow->next;
      // fast, two steps
      fast = fast->next;
      if (!fast) return nullptr;
      fast = fast->next;
    }
    return nullptr;
  }
#+END_SRC

* Careful problems
- [LRU Cache](https://leetcode.com/problems/lru-cache/description/)
  - Least Recent Used, out
    - If get/set, put it to the head
    - much linked-list operations, should be quite careful
  - there are a number of Cache replacement policies
  - FIFO
* Terminologies
in-order traversal
* Randoms
<stdlib.h>
<time.h>
srand(time(0));
rand() 
RAND_MAX
* bloom filter
* plan
** algorithm
*** array
- [ ] [best time to buy and sell stock III](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/) HARD
- [X] [Insert Delete GetRandom O(1) - Duplicates allowed](https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/description/) HARD
  - the skill to delete one element in a list with O(1) time.
- [ ] [Maximum Average SubarrayII](https://leetcode.com/problems/maximum-average-subarray-ii/description/) HARD
*** DP
- [ ] [guess number higher or lower](https://leetcode.com/problems/guess-number-higher-or-lower-ii/description/) MID
- [ ] [best time to buy and sell stock with transaction fee](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/) MID
- [ ] [Unique Substrings in Wraparound String](https://leetcode.com/problems/unique-substrings-in-wraparound-string/description/) MID
*** string
- [X] https://leetcode.com/problems/split-concatenated-strings/description/ MID
  - the different cases
  - understanding of the details according to cases
  - when implementing the details, understand by the real cases or imagine the real case first.
- [ ] https://leetcode.com/problems/longest-valid-parentheses/description/ HARD
- [ ] https://leetcode.com/problems/word-abbreviation/description/ HARD
*** math
- [ ] https://leetcode.com/problems/maximum-swap/description/ MID
- [ ] https://leetcode.com/problems/bulb-switcher-ii/description/ MID
- [ ] https://leetcode.com/problems/reconstruct-original-digits-from-english/description/ MID
*** tree
- [ ] https://leetcode.com/problems/largest-bst-subtree/description/ MID
- [ ] https://leetcode.com/problems/recover-binary-search-tree/description/ HARD
- [ ] https://leetcode.com/problems/house-robber-iii/description/ MID
*** hash map
- [ ] https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/description/ MID
- [ ] https://leetcode.com/problems/valid-sudoku/description/ HARD
- [ ] https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/description/ HARD
** ML
*** basics
- [ ] Basic Concepts
  - [ ] bias-variance
  - [ ] bayes theorem
  - [ ] bagging
  - [ ] boosting
  - [ ] collaborative filtering
  - [ ] dimension reduction
  - [ ] L1, L2 regualization
- [ ] logistic regression
- [ ] NMT
- [ ] k-means
- [ ] LTR
- [ ] CTR
- [ ] wide and deep
*** machine learning system design
- [ ] a graph of algorithm to use
- [ ] different kind of task, and reason about the choice
  - supervised
  - unsupervised
  - classification
  - regression
  - generalized linear model
  - decision tree
  - neural network
- [ ] metrics
- [ ] **how to optimize the model for production**
** system && architecture
- [ ] take note of the concepts
- [ ] the basic cs concepts
  - [ ] LRU
  - [ ] FIFO
- [ ] project adam
